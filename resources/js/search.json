[[{"l":"Introduction","p":["This is the detailed documentation of Akis Project."]},{"i":"what-is-akis","l":"What is Akis?","p":["It is a transcription tool of the Ottoman Turkish language. The tool takes images of pages written in Ottoman Turkish as an input, and gives you Turkish trancriptions as an output. It is a web application that can be used on any device with a web browser."]},{"i":"how-to-use-akis","l":"How to use Akis?","p":["Sign Up","Select an image","Crop the image","Submit the image","Wait for the transcription"]},{"i":"how-to-contact","l":"How to contact?","p":["The project was built in different components. You can contact the developers of the components directly. These are:","Project Management: Berrin Yanıkoğlu berrin@sabanciuniv.edu","Web Application (UI + APIs): Alper Arı alperari@sabanciuniv.edu","System design & architecture: Alper Arı alperari@sabanciuniv.edu","Machine Learning Model:","Zeynep Tandoğan: zeyneptandogan@sabanciuniv.edu","Mehmet Can Yavuz: mehmetyavuz@sabanciuniv.edu"]},{"i":"how-to-contribute","l":"How to contribute?","p":["You can directly contribute to the project by pushing your changes to the repositories on Akis GitHub.","Be aware that, main branches of repositories needs to be protected. Currently main branches are being served in vpa-com16 server. The changes should be merged into the develop branch and then be tested. After a consensus is reached, the changes can be merged into the main branch. Of course, don't forget to refresh the server after the merge and update the documentation!"]},{"l":"Developers Guide","p":["Please follow this documentation guide and get to know about the project structure by starting from Project Structure page."]}],[{"l":"Project Structure","p":["Akis Project is designed to work as an orchestration of different docker components.","Because of the nature of the project, the components are not independent. Updating one component may require updating the other components too.","These docker components are:","Docker Compose- \uD83E\uDDE0 Main component that orchestrates the other components. \uD83D\uDC48","Services","Volumes","Networks"]}],[{"l":"Docker Compose","p":["Because we don't have a standalone server for development, this version can also be used for local development.","Currently vpa-com16 is running that version.","docker-compose.dev.yml","docker-compose.prod.yml:","However, because we have a live version running in a vpa-com16 server, we have two versions of docker-compose.yml file. The services and environment variables will differ in two versions.","If you compare two files, they will look like this: test","It does the followings:","Manages environment variables","Manages networks","Manages services","Manages volumes","Notice the akis-proxy service. It is only used in the production version. We don't use in the development version or in the local machine.","Now let's see the definition of each component in details and how they work together. \uD83D\uDC49","Stores config files","There is a docker-compose.yml file that defines the services, volumes and networks of the project.","This is the main component \uD83E\uDDE0 that orchestrates the other components.","To run the project in a server.","To run the project locally."]}],[{"l":"Services","p":["Services are docker containers that runs applications inside. They are the main building blocks of the project.","Each application is isolated from others, with its own operating system, dependencies, environment variables, ports, volumes, etc."]},{"l":"Service definitions","p":["akis-nodejs-api is the backend service which stores session, i.e. it is cookie-setter of the frontend","akis-react-app is the frontend service, it will store session cookies on the browser","All the docker containers are designed to communicate each other using internal docker network.","And there is a reverse-proxy configured in demos.sabanciuniv.edu's machine, which forwards HTTPS(443) requests to vpa-com16's 3000 port.","But by its nature, backend service is designed to set cookies in frontend, which is bundled and delivered to the client's browser.","Communicates with akis-nodejs-api","Communicates with akis-react-app, akis-flask-api, and mongo","Forwards requests to host instance's 3001 (react) and 5001 (nodejs) ports","Gets image from akis-nodejs-api and returns back transcription results","Hosts images statically to akis-react-app","If we didn't have this akis-proxy service, users who visit demos wouldn't be able to sign-in even though their credentials were true. This is because of cross-origin cookies.","In the end, backend service will assume that incoming request is actually coming from demos even though it is designed to receive requests from vpa-com16's 3000 port. Then it will set cookies in demos successfully ✅","Proxy layer between demos.sabanciuniv.edu and host instance ( vpa-com16).","Receives requests from demos.sabanciuniv.edu","Runs backend logic","Runs express server","Runs flask server","Runs machine learning model","Runs NoSQL database","Runs on port 27017 (always)","Runs on port 3000 (when running in dev)","Runs on port 3000 (when running in prod)","Runs on port 3001 (when running in prod)","Runs on port 5000 (always)","Runs on port 5001 (always)","Saves images and crops to local directory of host instance","Serves UI","Sets cookie in the akis-react-app after a successful login","Shares volume between akis-flask-api","Shares volume with akis-nodejs-api","So, because of this reverse-proxying of demos.sabanciuniv.edu, the client should be demos.sabanciuniv.edu instead of vpa-com16's react-app service.","Stores cookies for authentication","Stores user information, transcription results and login sessions.","This service is only used in production environment. It is necessary to proxy requests from demos.sabanciuniv.edu to the host instance ( vpa-com16). Otherwise the host instance will not be able to receive requests from outside. Thus, nodejs api won't be able to set cookies in react application. And this will lead cross-origin cookie errors which means you won't be able to login.","To achieve this api & client interaction, we a proxy service which will forwards requests from demos.sabanciuniv.edu to vpa-com16's front and backend services.","Utilizes node-http-proxy library","Why do we need such proxying? short answer: reverse-proxy of demos"]},{"l":"Service Schema","p":["Those services share volumes and networks between each other.","In order to figure out how system works, you need to understand how each service communicates each other.","You can find details of this flow in the Transcription Workflow page."]}],[{"l":"Volumes","p":["Volumes are essential for persisting data between containers.","Those volumes are shared between containers.","Since the data inside the volumes are persistent, any damage or restart to the containers will not affect the data inside the volumes.","Even if you delete the containers, the data inside the volumes will not be deleted.","All volumes are kept inside volumes/ directory in host machine."]},{"l":"Volume definitions","p":["MongoDB's volume (used by mongo service)","Persistent (will remain even if you terminate services/containers)","Locally binded","That means host instance's /volumes/db directory is binded to the mongo container's /data/db directory.","And you need to manually create /volumes/db directory in host instance before running the project.","For detailed information about MongoDB, see Database (MongoDB).","Shared between flask and nodejs services","flask will save images in this directory (R+W)","nodejs will read images from this directory (R)","That means host instance's /volumes/uploads directory is binded to the nodejs container's uploads/ directory, flask container's instance/uploads/ directory."]}],[{"l":"Networks","p":["Networks are used to connect containers together.","Containers can communicate with each other if they are in the same network.","e.g. react service can send requests to nodejs service because they are in the same network. it can use http://nodejs:5001 to send requests. Notice that base url can be either container name or container ip address."]},{"l":"Network definitions","p":["Nothing fancy. Networks between services should be set internal: true If you want to connect to MongoDB instance from public internet, e.g. from MongoDB Compass, set internal: false"]}],[{"l":"Environment Variables","p":["All environment varibles of services are provided by docker-compose.yml file.","docker.compose.yml also get variables from .env file"]},{"l":"List of Environment Variables in .env and Where They Are Used","p":["✅","Description","Determines production or development environment","DOCKER_EXTERNAL_IP","Everything is same except REVERSE_PROXY_HOST is PROXY_PORT. Those are only used in production.","FLASK_API_PORT","flask-api","https://demos.sabanciuniv.edu currently...","mongodb","mongodb database name","mongodb password for connecting nodejs","mongodb root password","mongodb root username","mongodb username for connecting nodejs","MONGODB_DATABASE_NAME","MONGODB_NODEJS_PASSWORD","MONGODB_NODEJS_USERNAME","MONGODB_PORT","MONGODB_ROOT_PASSWORD","MONGODB_ROOT_USERNAME","NODE_ENV","NODEJS_API_PORT","nodejs-api","port on which flask is running","port on which mongodb is running","port on which nodejs is running","port on which proxy service is running","port on which react is running","proxy","PROXY_PORT ⚠️","REACT_APP_PORT","react-app","REVERSE_PROXY_HOST ⚠️","session secret of nodejs","SESSION_SECRET","Value of Host machine's IP address. localhost or 127.0.0.1 in development. vpa-com16's IP address in production","Variable"]}],[{"i":"proxying-only-in-production","l":"Proxying (only in production)","p":["As stated before, things work different in production mode.","IT team has configured a reverse-proxy in demos.sabanciuniv.edu to forward requests to vpa-com16 host instance's 3000 port.","This means, when you visit demos.sabanciuniv.edu, you are actually visiting vpa-com16:3000 in the host instance.","Also it is worth to mention that there is no SSL certificate set in vpa-com16. So you can't visit vpa-com16 directly over HTTP. You can only visit demos.sabanciuniv.edu over HTTPS which will communicate with vpa-com16's port 3000.","One benefit of such reverse-proxying is hiding vpa-com16's other services from demos, which brings another safety level. demos will only know about the port 3000 of vpa-com16 and nothing else.","Here is the schema of proxies: schema"]}],[{"i":"database-mongodb","l":"Database (MongoDB)","p":["Database Name: akis","Collections:","users: user details","transcriptions: transcription details of each user, text results of each transcription, image paths of each crop","sessions: session data, used by nodejs-api service"]},{"l":"Details of Collection and Documents","p":["a segment is made of:","createdAt","date","email","id","imageURL: path to the cropped image which is stored in storage","name","Nothing fancy, just some session data.","noTranscribedCrops: to track users how many lines they transcribed","noTranscribedPages: to track users how many pages they transcribed","password(encrypted)","segments: array of segments (lines)","sourceImageUrl: path to the source image which is stored in storage","text: Turkih transcription of the segment","transcriptions","transcriptions-detailed","userEmail","userId","users"]},{"l":"How to access MongoDB from outside","p":["You can connect to the database using any GUI or CLI client tools. I recommend MongoDB Compass for GUI and MongoDB Shell for CLI. But there are some other alternatives like Mingo or Studio3T.","You can enter nodejs_user credentials to connect to the database. How to connect","Get the password from envionment variables."]}],[{"i":"storage-static-image-hosting","l":"Storage (Static Image Hosting)","p":["Prior to that, we were storing images (crop images) in Google Cloud Storage and retreiving their url s to show in UI.","But now, we are hosting images in vpa-com16 standalone server.","This brings us speed and simplicity. No network latency, no credit card payment for extra storage.","We keep and serve crop images in volumes/uploads/ directory in vpa-com16 server."]},{"l":"Storage Structure","p":["Each user has its own directory in volumes/uploads/ directory.","Each transcription is kept under its user's directory.","Each transcription has:","source image","crops/ directory (to keep black/white crop images)","crops_colored/ directory (to keep colored crop images and serve to UI)"]},{"l":"Nodejs Service Hosting Images Statically","p":["As told before, akis-nodejs-api service is hosting images statically. It is serving images from volumes/uploads/ directory.","UI can access those images by making API calls to the akis-nodejs-api service.","e.g. if you are running the project in your local:","e.g. if you are running the project in the vpa-com16 server:","Respective code of akis-react-app: prepareImageUrl function in react-akis-app url comes from API call, i.e. POST akis-nodejs-api/predict"]},{"i":"which-services-interact-with-uploads-volume","l":"Which services interact with /uploads volume?","p":["akis-nodejs-api: to read crop image and serve it to UI","akis-flask-api: to save crop image, read from it, process it, and send the text result akis-nodejs-api","\uD83D\uDC49\uD83D\uDC49\uD83D\uDC49 You can better understand how these services interact with /uploads volume in Transcription Workflow page."]}],[{"l":"Transcription Workflow"},{"i":"schema-below-the-page","l":"Schema BELOW the Page\uD83D\uDC47","p":["Client makes POST API call to /predict endpoint of Nodejs service.","Client then retrieves all imagess by sending GET /uploads/... API call Nodejs service.","Flask service processes image using ML model.","Flask service saves crop images to /uploads volume.","Flask service sends text results and image paths back to Nodejs service.","It makes a POST API call to /predict endpoint of Flask service.","It saves black/white crop images to /uploads/${userId}/.../crops/","It saves colored crop images to /uploads/${userId}/.../crops_colored/","It sends the image as multipart/form-data in the body of the request.","It sends userId within the body of the request.","It splits image into crops.","Nodejs service forwards the incoming image to Flask service.","Nodejs service returns static images back to client.","Nodejs service saves texts and image paths to MongoDB, under transactions collection.","Nodejs service sends texts and image paths to the client UI.","Notice the for loop. Flask will return multple texts with image paths to Nodejs service.","Sends imageFile and userId within the body","So that we can keep track of users' transcriptions, i.e. how many images they have submitted, what are the texts they have extracted, etc.","Then extracts texts from each crops.","UI will show images on screen \uD83C\uDF89","When a user submits an image, the following workflow is triggered:","With the following HTTP response format:"]},{"l":"Schema","p":["transcription workflow"]}],[{"l":"Running Locally","p":["Ensure that you have the followings installed before you attempt to run the project in your computer:","Docker","24.0.4, build 3713ee1","Note that the reason why docker is used in local development is because of volume bindings."]},{"l":"Steps","p":["After this step, make sure you have the following folder structure: final folder structure","akis-flask-api","akis-nodejs-api","akis-react-app","Because we are binding local volumes to docker containers, we need to create those volumes manually in the host machine.","Change environment variables","Clone repositories from github","Create a folder named akis-project somewhere in your computer.","Create volumes in project directory (you must be in akis-project folder, at the root)","docker-compose","Run the following commands to change name of environment files and docker compose file:","Run the following commands to create directories of volumes:","Run the project","Switch to respective branches of each repository and pull the latest code:","The -d flag is for running the containers in the background.","This part is a MUST!","To see the logs in interactive mode, remove the -d flag.","Within only one command, you can start the whole project."]}],[{"l":"ML Model","p":["There is already a prepared documentation for the model. You can find it here"]}],[{"l":"Future Work","p":["There might be some work to do in the future throughout the system. These are:","If we cancel demos.sabanciuniv.edu reverse-proxying, there should be a nginx or apache configuration in vpa-com16 and SSL certification.","React can be served by nginx or apache using their pre-built docker images.","Storage should be cleaned periodically for the sake of data privacy and protection. (/uploads volume)","There might be some security issues in the system. These should be investigated and fixed.","For local development, we should give up using docker-compose. This is because of the volume bindings. We should find a way to bind volumes in local development. Also each time shutting containers, rebuilding service images and running compose again when we change the code ==> takes freaking time\uD83D\uDCA5!","There can be a better authentication and MFA implementation.","Users' can have tokens to transcribe images, .i.e. a new user can transcribe max 10 pages. After that, he/she should buy/request tokens to transcribe more.","MONOREPO, of course handling each repo separately causes so much pain..."]}]]